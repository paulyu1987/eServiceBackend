//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cendyn.eConcierge.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Configuration;
    using System.Data.Entity.Core.EntityClient;
    using Cendyn.eConcierge.EntityModel;
    using Cendyn.eConcierge.Core.EntityFrameworkRepository.Interfaces;
    
    public partial class ConciergeEntities : DbContext, IDbContext
    {
    	//In order to reuse connection string for other setting, so we customized the template
    	//We populate EF connection string in class
    	public ConciergeEntities(string connectionString)
    		: base(connectionString)
    	{
    	}
    
    	private static string _connectionString;
        public static string ConnectionString
        {
            get
            {
                if (_connectionString == null)
                {
                    string baseConnectionString = "";
     
                    var entityBuilder = new EntityConnectionStringBuilder
                    {
                        Provider = "System.Data.SqlClient",
                        ProviderConnectionString = baseConnectionString,
                        Metadata =
                            String.Format(@"res://*/{0}.csdl|res://*/{0}.ssdl|res://*/{0}.msl","ConciergeDB")
                    };
     
                    _connectionString = entityBuilder.ToString();
                }
                return _connectionString;
            }
        }
    
        public ConciergeEntities()
            : base(ConnectionString)
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<EventDesc> EventDescs { get; set; }
        public virtual DbSet<Guest> Guests { get; set; }
        public virtual DbSet<Hotel> Hotels { get; set; }
        public virtual DbSet<SentEmailLog> SentEmailLogs { get; set; }
        public virtual DbSet<setting> settings { get; set; }
        public virtual DbSet<PlannerEvent> PlannerEvents { get; set; }
        public virtual DbSet<ConciergeLogin> ConciergeLogins { get; set; }
        public virtual DbSet<ConciergeHotelAccessMapping> ConciergeHotelAccessMappings { get; set; }
        public virtual DbSet<eUpgradeRequest> eUpgradeRequests { get; set; }
        public virtual DbSet<eUpgradeInventory> eUpgradeInventories { get; set; }
        public virtual DbSet<GuestPlanner> GuestPlanners { get; set; }
        public virtual DbSet<GuestPlanner_Log> GuestPlanner_Log { get; set; }
        public virtual DbSet<DicBrand> DicBrands { get; set; }
        public virtual DbSet<DicChain> DicChains { get; set; }
        public virtual DbSet<HotelSocialMedia> HotelSocialMedias { get; set; }
        public virtual DbSet<HotelSetting> HotelSettings { get; set; }
        public virtual DbSet<RateType> RateTypes { get; set; }
        public virtual DbSet<RateTypeLog> RateTypeLogs { get; set; }
        public virtual DbSet<SSOProduct> SSOProducts { get; set; }
        public virtual DbSet<FGuest> FGuests { get; set; }
        public virtual DbSet<RoomType_Code> RoomType_Code { get; set; }
        public virtual DbSet<RoomImage> RoomImages { get; set; }
        public virtual DbSet<eUpgradeTransactionCode> eUpgradeTransactionCodes { get; set; }
        public virtual DbSet<eUpgradeBrandCssMapping> eUpgradeBrandCssMappings { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<Hotels_DateFormat> Hotels_DateFormat { get; set; }
        public virtual DbSet<Hotels_Languages> Hotels_Languages { get; set; }
        public virtual DbSet<L_DateFormat> L_DateFormat { get; set; }
        public virtual DbSet<L_WeekDay> L_WeekDay { get; set; }
        public virtual DbSet<CurrencyConvert> CurrencyConverts { get; set; }
        public virtual DbSet<L_Currency> L_Currency { get; set; }
        public virtual DbSet<Hotels_Currency> Hotels_Currency { get; set; }
        public virtual DbSet<EmailTemplate> EmailTemplates { get; set; }
    }
}
